version: '3.8'

services:
  # Infrastructure Services Layer
  discovery-service:
    image: kirill1308/fintrack-discovery-service:latest
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - fintrack-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${DOCKER_EUREKA_URI}

  config-service:
    image: kirill1308/fintrack-config-service:latest
    container_name: config-service
    ports:
      - "8888:8888"
    networks:
      - fintrack-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${DOCKER_EUREKA_URI}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      discovery-service:
        condition: service_healthy

  gateway-service:
    image: kirill1308/fintrack-gateway-service:latest
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - fintrack-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
    depends_on:
      config-service:
        condition: service_healthy

  # Message Broker Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - fintrack-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - fintrack-network
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8089:8080"
    networks:
      - fintrack-network
    depends_on:
      broker:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'

  # Core Services Layer
  authentication-service:
    image: kirill1308/fintrack-authentication-service:latest
    container_name: authentication-service
    ports:
      - "8081:8081"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
    depends_on:
      gateway-service:
        condition: service_healthy

  user-service:
    image: kirill1308/fintrack-user-service:latest
    container_name: user-service
    ports:
      - "8082:8082"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/${USER_DB}
      - SPRING_DATASOURCE_USERNAME=${USER_USER}
      - SPRING_DATASOURCE_PASSWORD=${USER_PASSWORD}
    depends_on:
      - user-db
      - gateway-service

  subscription-service:
    image: kirill1308/fintrack-subscription-service:latest
    container_name: subscription-service
    ports:
      - "8083:8083"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://subscription-db:5432/${SUBSCRIPTION_DB}
      - SPRING_DATASOURCE_USERNAME=${SUBSCRIPTION_USER}
      - SPRING_DATASOURCE_PASSWORD=${SUBSCRIPTION_PASSWORD}
    depends_on:
      - subscription-db
      - user-service

  wallet-service:
    image: kirill1308/fintrack-wallet-service:latest
    container_name: wallet-service
    ports:
      - "8084:8084"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://wallet-db:5432/${WALLET_DB}
      - SPRING_DATASOURCE_USERNAME=${WALLET_USER}
      - SPRING_DATASOURCE_PASSWORD=${WALLET_PASSWORD}
    depends_on:
      - wallet-db
      - user-service

  collaborator-service:
    image: kirill1308/fintrack-collaborator-service:latest
    container_name: collaborator-service
    ports:
      - "8085:8085"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://collaborator-db:5432/${COLLABORATOR_DB}
      - SPRING_DATASOURCE_USERNAME=${COLLABORATOR_USER}
      - SPRING_DATASOURCE_PASSWORD=${COLLABORATOR_PASSWORD}
    depends_on:
      - collaborator-db
      - user-service

  transaction-service:
    image: kirill1308/fintrack-transaction-service:latest
    container_name: transaction-service
    ports:
      - "8086:8086"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://transaction-db:5432/${TRANSACTION_DB}
      - SPRING_DATASOURCE_USERNAME=${TRANSACTION_USER}
      - SPRING_DATASOURCE_PASSWORD=${TRANSACTION_PASSWORD}
    depends_on:
      - transaction-db
      - wallet-service

  analytics-service:
    image: kirill1308/fintrack-analytics-service:latest
    container_name: analytics-service
    ports:
      - "8087:8087"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://analytics-db:5432/${ANALYTICS_DB}
      - SPRING_DATASOURCE_USERNAME=${ANALYTICS_USER}
      - SPRING_DATASOURCE_PASSWORD=${ANALYTICS_PASSWORD}
    depends_on:
      - analytics-db
      - transaction-service

  notification-service:
    image: kirill1308/fintrack-notification-service:latest
    container_name: notification-service
    ports:
      - "8088:8088"
    networks:
      - fintrack-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=${DOCKER_CONFIG_URI}
    depends_on:
      - broker
      - gateway-service

  # Data Layer
  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      - fintrack-network
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server ~/minio --console-address :9090
    ports:
      - '9090:9090'
      - '9000:9000'
    volumes:
      - minio_data:/minio

  # Database Layer
  user-db:
    image: postgres:15-alpine
    container_name: user-db
    networks:
      - fintrack-network
    environment:
      - POSTGRES_DB=${USER_DB}
      - POSTGRES_USER=${USER_USER}
      - POSTGRES_PASSWORD=${USER_PASSWORD}
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_USER} -d ${USER_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  subscription-db:
    image: postgres:15-alpine
    container_name: subscription-db
    networks:
      - fintrack-network
    environment:
      - POSTGRES_DB=${SUBSCRIPTION_DB}
      - POSTGRES_USER=${SUBSCRIPTION_USER}
      - POSTGRES_PASSWORD=${SUBSCRIPTION_PASSWORD}
    volumes:
      - subscription_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"

  wallet-db:
    image: postgres:15-alpine
    container_name: wallet-db
    networks:
      - fintrack-network
    environment:
      - POSTGRES_DB=${WALLET_DB}
      - POSTGRES_USER=${WALLET_USER}
      - POSTGRES_PASSWORD=${WALLET_PASSWORD}
    volumes:
      - wallet_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5435:5432"

  collaborator-db:
    image: postgres:15-alpine
    container_name: collaborator-db
    networks:
      - fintrack-network
    environment:
      - POSTGRES_DB=${COLLABORATOR_DB}
      - POSTGRES_USER=${COLLABORATOR_USER}
      - POSTGRES_PASSWORD=${COLLABORATOR_PASSWORD}
    volumes:
      - collaborator_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5436:5432"

  transaction-db:
    image: postgres:15-alpine
    container_name: transaction-db
    networks:
      - fintrack-network
    environment:
      - POSTGRES_DB=${TRANSACTION_DB}
      - POSTGRES_USER=${TRANSACTION_USER}
      - POSTGRES_PASSWORD=${TRANSACTION_PASSWORD}
    volumes:
      - transaction_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5437:5432"

  analytics-db:
    image: postgres:15-alpine
    container_name: analytics-db
    networks:
      - fintrack-network
    environment:
      - POSTGRES_DB=${ANALYTICS_DB}
      - POSTGRES_USER=${ANALYTICS_USER}
      - POSTGRES_PASSWORD=${ANALYTICS_PASSWORD}
    volumes:
      - analytics_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5438:5432"

volumes:
  minio_data:
  user_db_data:
  subscription_db_data:
  wallet_db_data:
  collaborator_db_data:
  transaction_db_data:
  analytics_db_data:

networks:
  fintrack-network:
    driver: bridge
